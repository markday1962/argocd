---
kind: {{ .Values.kind }}
apiVersion: apps/v1
metadata:
  {{- if .Values.prefix }}
  name: {{ .Values.prefix }}-{{ .Chart.Name }}
  labels:
    app: {{ .Values.prefix }}-{{ .Chart.Name }}
  {{- else }}
    name: {{ .Chart.Name }}
    labels:
      app: {{ .Chart.Name }}
  {{- end }}
spec:
  replicas: {{ .Values.application.replicaCount }}
  selector:
    {{- if .Values.prefix }}
    matchLabels:
      app: {{ .Values.prefix }}-{{ .Chart.Name }}
    {{- else }}
    matchLabels:
      app: {{ .Chart.Name }}
    {{- end }}
  {{- if eq .Values.kind "StatefulSet"}}
  {{- if .Values.prefix }}
  serviceName: {{ .Values.prefix }}-{{ .Chart.Name }}-headless-svc
  {{- else }}
  serviceName: {{ .Chart.Name }}-headless-svc
  {{- end }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- if .Values.prefix }}
        app: {{ .Values.prefix }}-{{ .Chart.Name }}
        {{- else }}
        app: {{ .Chart.Name }}
        {{- end }}
    spec:
      nodeSelector:
        cipher.ai/node-group: {{ .Values.application.nodeSelector.nodeGroup }}
        {{- if .Values.zone }}
        failure-domain.beta.kubernetes.io/zone: {{ .Values.zone }}
        {{- end }}
      {{- if .Values.initContainers.c1.name }}
      initContainers:
        - name: {{ .Values.initContainers.c1.name }}
          image: {{ .Values.initContainers.c1.image }}
          command:
            - sh
            - -c
            - {{ .Values.initContainers.c1.command | quote }}
          {{- if .Values.initContainers.c1.volumeMounts.name }}
          volumeMounts:
            - name: {{.Values.initContainers.c1.name }}-{{ .Values.initContainers.c1.volumeMounts.name }}
              mountPath: {{ .Values.initContainers.c1.volumeMounts.mountPath }}
          {{- end }}
          securityContext:
            privileged: {{ .Values.initContainers.c1.securityContext.privileged }}
            runAsUser: {{ .Values.initContainers.c1.securityContext.runAsUser }}
        {{- if .Values.initContainers.c2.name }}
        - name: {{ .Values.initContainers.c2.name }}
          image: {{ .Values.initContainers.c2.image }}
          command:
            - sh
            - -c
            - {{ .Values.initContainers.c2.command | quote }}
          {{- end }}
          {{- if .Values.initContainers.c2.volumeMounts.name }}
          volumeMounts:
            - name: {{.Values.initContainers.c2.name }}-{{ .Values.initContainers.c2.volumeMounts.name }}
              mountPath: {{ .Values.initContainers.c2.volumeMounts.mountPath }}
          {{- end }}
          securityContext:
            privileged: {{ .Values.initContainers.c2.securityContext.privileged }}
            runAsUser: {{ .Values.initContainers.c2.securityContext.runAsUser }}
      {{- end }}
      containers:
        {{- if .Values.prefix }}
        - name: {{ .Values.prefix }}-{{ .Chart.Name }}
        {{- else }}
        - name: {{ .Chart.Name }}
        {{- end }}
          {{- if .Values.application.publicImage }}
          image: {{ .Chart.AppVersion }}
          {{- else }}
          image: {{ .Values.repository }}{{ .Chart.Name }}:{{ .Values.application.tag | default .Chart.AppVersion }}
          {{- end }}
          {{- if .Values.application.command }}
          command:
            - sh
            - -c
            - {{ .Values.application.command | quote }}
          args: [ {{.Values.application.args | quote }} ]
          {{- end }}
          {{- if .Values.application.envs }}
          env:
            {{- range .Values.application.envs }}
            {{- if .name }}
            - name: {{ .name }}
              value: {{ .value }}
            {{- end }}
            {{- end }}
          {{- end }}
          imagePullPolicy: {{ .Values.application.imagePullPolicy }}
          {{- if .Values.application.runAsUser }}
          securityContext:
            runAsUser: {{ .Values.application.runAsUser }}
          {{- end }}
          ports:
            {{- range .Values.application.ports }}
              - name: {{ .name }}
                containerPort: {{ .port }}
                protocol: {{ .protocol }}
            {{- end }}
          {{- if .Values.application.liveness.enabled }}
          livenessProbe:
          {{- if .Values.application.liveness.probeType }}
            httpGet:
              path: {{ .Values.application.liveness.path }}
              port: {{ .Values.application.liveness.port }}
              scheme: {{ .Values.application.liveness.scheme }}
          {{- else }}
            tcpSocket:
              port: {{ .Values.application.liveness.port }}
          {{- end }}
            initialDelaySeconds: {{ .Values.application.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.application.liveness.periodSeconds }}
          {{- end }}
          {{- if .Values.application.readiness.enabled }}
          readinessProbe:
          {{- if .Values.application.readiness.probeType }}
            httpGet:
              path: {{ .Values.application.readiness.path }}
              port: {{ .Values.application.readiness.port }}
              scheme: {{ .Values.application.readiness.scheme }}
          {{- else }}
            tcpSocket:
              port: {{ .Values.application.readiness.port }}
          {{- end }}
            initialDelaySeconds: {{ .Values.application.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.application.readiness.periodSeconds }}
          {{- end }}
          {{- if .Values.application.mounts }}
          volumeMounts:
            {{- if .Values.application.mounts.configMap.mountPath }}
            - name: config-volume
              mountPath: {{ .Values.application.mounts.configMap.mountPath }}
              subPath: {{ .Values.application.mounts.configMap.subPath }}
            {{- end }}
            {{- if .Values.efs.cc.mountPath }}
            - name: {{ .Values.efs.cc.claimName }}-volume
              mountPath: {{ .Values.efs.cc.mountPath }}
              {{- if .Values.efs.cc.subPath  }}
              subPath: {{ .Values.efs.cc.subPath }}
              {{- end }}
            {{- end }}
            {{- if .Values.efs.cipher.mountPath }}
            - name: {{ .Values.efs.cipher.claimName }}-volume
              mountPath: {{ .Values.efs.cipher.mountPath }}
              {{- if .Values.efs.cipher.subPath  }}
              subPath: {{ .Values.efs.cipher.subPath }}
              {{- end }}
            {{- end }}
            {{- if eq .Values.pvc.container "application" }}
            {{- if .Values.pvc.claimName }}
            - name: {{ .Values.pvc.claimName }}-volume
              mountPath: {{ .Values.pvc.mountPath }}
              {{- if .Values.pvc.subPath  }}
              subPath: {{ .Values.application.pvc.subPath }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- if .Values.emptyDir.name }}
            - name: {{ .Values.emptyDir.name }}
              emptyDir: {}
            {{- end }}
            {{- if .Values.hostPath.name }}
            - name: {{ .Values.hostPath.name }}
              mountPath: {{ .Values.hostPath.mountPath }}
            {{- end }}
            {{- if eq .Values.kind "StatefulSet"}}
            {{- if .Values.statefulSet.name }}
            - name: {{ .Values.statefulSet.name }}
              mountPath: {{ .Values.statefulSet.mountPath }}
            {{- end }}
            {{- end }}
          {{- end }}
        {{- if .Values.sidecar.enabled }}
        - name: {{ .Values.sidecar.name }}
          image: {{ .Values.sidecar.image }}
          {{- if .Values.sidecar.runAsUser }}
          securityContext:
            runAsUser: {{ .Values.sidecar.runAsUser }}
          {{- end }}
          ports:
            {{- range .Values.sidecar.ports }}
              - name: {{ .name }}
                containerPort: {{ .port }}
                protocol: {{ .protocol }}
            {{- end }}
          volumeMounts:
            {{- if eq .Values.pvc.container "sidecar" }}
              {{- if .Values.pvc.claimName }}
              - name: {{ .Values.pvc.claimName }}-volume
                mountPath: {{ .Values.pvc.mountPath }}
                {{- if .Values.pvc.subPath  }}
                subPath: {{ .Values.application.pvc.subPath }}
                {{- end }}
              {{- end }}
            {{- end }}
        {{- end }}
        {{- if .Values.jaegerAgent.enabled }}
        - name: jaegertracing
          image: {{ .Values.jaeger.deployment.image }}
          args: ['{{ .Values.jaeger.deployment.args }}']
          securityContext:
            runAsUser: {{ .Values.jaeger.deployment.runAsUser }}
          ports:
            {{- range .Values.jaeger.deployment.ports }}
              - name: {{ .name }}
                containerPort: {{ .port }}
                protocol: {{ .protocol }}
            {{- end }}
        {{- end }}
      priorityClassName: high-priority
      volumes:
        {{- if .Values.application.mounts.configMap.mountPath }}
        - name: config-volume
          configMap:
            {{- if .Values.prefix }}
            name: {{ .Values.prefix }}-{{ .Chart.Name }}-cm
            {{- else }}
            name: {{ .Chart.Name }}-cm
            {{- end }}
            defaultMode: 0444
        {{- end }}
        {{- if .Values.initContainers.c1.volumeMounts.name }}
        - name: {{.Values.initContainers.c1.name }}-{{ .Values.initContainers.c1.volumeMounts.name }}
          hostPath:
            path: /sys
        {{- end }}
        {{- if .Values.initContainers.c2.volumeMounts.name }}
        - name: {{.Values.initContainers.c2.name }}-{{ .Values.initContainers.c2.volumeMounts.name }}
          hostPath:
            path: /sys
        {{- end }}
        {{- if .Values.efs.cc.mountPath }}
        - name: {{ .Values.efs.cc.claimName }}-volume
          persistentVolumeClaim:
            claimName: {{ .Values.efs.cc.claimName }}
        {{- end }}
        {{- if .Values.efs.cipher.mountPath }}
        - name: {{ .Values.efs.cipher.claimName }}-volume
          persistentVolumeClaim:
            claimName: {{ .Values.efs.cipher.claimName }}
        {{- end }}
        {{- if .Values.pvc.mountPath }}
        - name: {{ .Values.pvc.claimName }}-volume
          persistentVolumeClaim:
            claimName: {{ .Values.pvc.claimName }}-pvc
        {{- end }}
        {{- if .Values.hostPath.name }}
        - name: {{ .Values.hostPath.name }}
          hostPath:
            path: {{ .Values.hostPath.path }}
            type: Directory
        {{- end }}
  {{- if eq .Values.kind "StatefulSet"}}
  {{- if .Values.statefulSet.name }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.statefulSet.name }}
      spec:
        accessModes: [ {{ .Values.statefulSet.accessModes | quote }} ]
        resources:
          requests:
            storage: {{ .Values.statefulSet.storage }}
 {{- end }}
 {{- end }}
